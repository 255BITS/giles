// Generated by CoffeeScript 1.2.1-pre
var createFixture, fs, giles;

giles = require('../giles');

fs = require('fs');

describe('watch', function() {
  return it('should assert', function() {
    return [1, 2, 3].indexOf(5).should.equal(-1);
  });
});

describe('giles', function() {
  return it('should get extensions', function() {
    giles.parseFileName('test.test').should.eql(['test', '.test']);
    giles.parseFileName('test').should.eql(['test', '']);
    giles.parseFileName('.test').should.eql(['', '.test']);
    giles.parseFileName('file.min.css').should.eql(['file.min', '.css']);
    return giles.parseFileName('file.really.long-whatever-name.out').should.eql(['file.really.long-whatever-name', '.out']);
  });
});

giles.addCompiler('.test-giles-compiler', '.test-giles-compiler-out', function(contents) {
  return contents.substr(0, 5);
});

describe('new compiler', function() {
  return it('should compile correctly', function() {
    var result;
    result = giles.compileFile(__dirname + '/test.test-giles-compiler');
    result.content.should.equal(result.originalContent.substr(0, 5));
    result.outputFile.indexOf('test.test-giles-compiler-out').should.not.eql(-1);
    result.inputFile.indexOf('test.test-giles-compiler').should.not.eql(-1);
    giles.addCompiler(['.test-giles-compiler', '.test-giles-compiler2'], '.test-giles-compiler-out', function(contents) {
      return contents.substr(0, 6);
    });
    result = giles.compileFile(__dirname + '/test.test-giles-compiler');
    result.content.should.equal(result.originalContent.substr(0, 6));
    return giles.addCompiler('.test-giles-compiler', '.test-giles-compiler-out', function(contents) {
      return contents.substr(0, 5);
    });
  });
});

describe('building', function() {
  return it('should build an individual file', function() {
    var contents;
    giles.compile(__dirname + '/test.test-giles-compiler');
    contents = fs.readFileSync(__dirname + '/test.test-giles-compiler-out', 'utf8');
    return contents.length.should.equal(5);
  });
});

createFixture = function(filename, content, done, callback) {
  var file;
  file = __dirname + "/" + filename;
  fs.writeFileSync(file, content, 'utf8');
  return setTimeout(function() {
    callback();
    fs.unlinkSync(file);
    return done();
  }, 100);
};

describe('watch', function() {
  return it('should build a file when it has changed', function(done) {
    var origContent;
    giles.watch(__dirname + '/.', {});
    origContent = 'this is a tmp file';
    return createFixture('tmp.test-giles-compiler', origContent, done, function() {
      var content;
      content = fs.readFileSync(__dirname + '/tmp.test-giles-compiler-out', 'utf8');
      return content.should.equal(origContent.substr(0, 5));
    });
  });
});
